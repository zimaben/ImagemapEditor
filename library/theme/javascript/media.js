/**
 * Main jQuery media file for the plugin.
 *
 * @since 1.0.0
 *
 * @package TGM New Media Plugin
 * @author  Thomas Griffin
 */
jQuery(document).ready(function($){
    is_font_awesome = true; //SET TO FALSE IF YOU WANT TO RENDER WITHOUT FONT AWESOME
    // Prepare the variable that holds our custom media manager.
    var tgm_media_frame;
    if(tgm_nmp_media.debug == 1) console.log( 'image size:' + tgm_nmp_media.custom_image_size ); 
    $default_width = 760;
    $default_height = 760;
    // Bind to our click event in order to open up the new media experience.
    $(document.body).on('click.tgmOpenMediaManager', '.tgm-open-media', function(e){
        // Prevent the default action from occuring.
        e.preventDefault();

        // If the frame already exists, re-open it.
        if ( tgm_media_frame ) {
            tgm_media_frame.open();
            return;
        }

        /**
         * The media frame doesn't exist let, so let's create it with some options.
         *
         * This options list is not exhaustive, so I encourage you to view the
         * wp-includes/js/media-views.js file to see some of the other default
         * options that can be utilized when creating your own custom media workflow.
         */
        tgm_media_frame = wp.media.frames.tgm_media_frame = wp.media({
            /**
             * We can pass in a custom class name to our frame, so we do
             * it here to provide some extra context for styling our
             * media workflow. This helps us to prevent overwriting styles
             * for other media workflows.
             */
            className: 'media-frame tgm-media-frame',

            /**
             * When creating a new media workflow, we are given two types
             * of frame workflows to chose from: 'select' or 'post'.
             *
             * The 'select' workflow is the default workflow, mainly beneficial
             * for uses outside of a post or post type experience where a post ID
             * is crucial.
             *
             * The 'post' workflow is tailored to screens where utilizing the
             * current post ID is critical.
             *
             * Since we only want to upload an image, let's go with the 'select'
             * frame option.
             */
            frame: 'select',

            /**
             * We can determine whether or not we want to allow users to be able
             * to upload multiple files at one time by setting this parameter to
             * true or false. It defaults to true, but we only want the user to
             * upload one file, so let's set it to false.
             */
            multiple: false,

            /**
             * We can set a custom title for our media workflow. I've localized
             * the script with the object 'tgm_nmp_media' that holds our
             * localized stuff and such. Let's populate the title with our custom
             * text.
             */
            title: tgm_nmp_media.title,
            
            /**
             * We can force what type of media to show when the user views his/her
             * library. Since we are uploading an image, let's limit the view to
             * images only.
             */
            library: {
                type: 'image'
            },

            /**
             * Let's customize the button text. It defaults to 'Select', but we
             * can customize it here to give us better context.
             *
             * We can also determine whether or not the modal requires a selection
             * before the button is enabled. It requires a selection by default,
             * and since this is the experience desired, let's keep it that way.
             *
             * By default, the toolbar generated by this frame fires a generic
             * 'select' event when the button is clicked. We could declare our
             * own events here, but the default event will work just fine.
             */
            button: {
                text:  tgm_nmp_media.button
            }
        });

        /**
         * ========================================================================
         * EVENT BINDING
         *
         * This section before opening the modal window should be used to bind to
         * any events where we want to customize the view. This includes binding
         * to any custom events that may have been generated by us creating
         * custom controller states and views.
         *
         * The events used below are not exhaustive, so I encourage you to again
         * study the wp-includes/js/media-views.js file for a better feel of all
         * the potential events you can attach to.
         * ========================================================================
         */

        /**
         * We are now attaching to the default 'select' event and grabbing our
         * selection data. Since the button requires a selection, we know that a
         * selection will be available when the event is fired.
         *
         * All we are doing is grabbing the current state of the frame (which will
         * be 'library' since that's the only area where we can make a selection),
         * getting the selection, calling the 'first' method to pluck the first
         * object from the string and then forcing a faux JSON representation of
         * the model.
         *
         * When all is said and done, we are given absolutely everything we need to
         * insert the data into our custom input field. Specifically, our
         * media_attachment object will hold a key titled 'url' that we want to use.
         */
        tgm_media_frame.on('select', function(){
            // Grab our attachment selection and construct a JSON representation of the model.
            var media_attachment = tgm_media_frame.state().get('selection').first().toJSON();
            if( tgm_nmp_media.debug == 1 ) console.log( media_attachment );
            media_attachment.uploading = true;
            // Send the attachment URL to our custom input field via jQuery.
            $('#tgm-new-media-image').val(media_attachment.url);
            // create the HMTL for our imagemap editor
            if( !isNaN( tgm_nmp_media.custom_image_size.width ) ) { //if a custom image size name exactly matches the post type use the custom image size - see tgm.php 
                $default_width = tgm_nmp_media.custom_image_size.width;
                $default_height = tgm_nmp_media.custom_image_size.height;
            }

            imagemap_editor($default_width,$default_height, media_attachment.url, '#mapEditor');

        });

        // Now that everything has been set, let's open up the frame.
        tgm_media_frame.open();
    });
});
function imagemap_editor($w, $h, $url, $mapEditor){
    var wrap = document.createElement("div");
        wrap.id = "imagemap4posis";

    //elements 
    var container = document.createElement("div");
        container.id = "mapContainer";
        jQuery(container).addClass("effect");
        jQuery(container).attr("style","width: "+$w+"px; height: "+$h+"px;");
    var img = document.createElement("img");
        img.src = $url;
        img.id = "main";
        jQuery(img).addClass("imgmapMainImage");
        jQuery(img).attr("style","width: "+$w+"px;");
        jQuery(img).attr("usemap", "#map");

    var map = document.createElement("map");
        map.id = "map";
        jQuery(map).attr('name', 'map');
    var form = document.createElement("div");
        form.id = "coords_area";	
        form.innerHTML = '</ul><div class="view_controls"><span id="view_copy"><i class="far fa-copy"></i> Copy to clipboard</span><span class="status"></span> <span id="view_close"><i class="far fa-times-circle"></i></span></div><input id="coordsText" class="effect" name="" type="text" value="" placeholder="« Coordinates »"><textarea name="" id="areaText" class="effect" placeholder="« HTML-Code »" style="width: 500px;"></textarea>';
   
    var s = document.createElement("script");
        s.type = "text/javascript";
        s.src = get_js_url()+"imagemap-editor.js";//This is not the recommended way to source scripts - @TODO revisit this code

    var st = document.createElement("link");
        st.rel = "stylesheet";
        st.type = 'text/css';
        st.href = get_css_url()+"imagemap-editor.css";

    var dots = document.createElement("div");
        dots.id = "dots";

    jQuery(container).append(
        img,
        map,
        dots
    );
    build_main_controls(wrap, container);
    jQuery(wrap).append(
        s, //Script first, then style
        st,
        container,
        form

    );
    jQuery(wrap).attr("style","width: "+parseInt($w+120)+"px; height: "+parseInt($h+40)+"px;");//50px padding plus 70px for the side control panel
    if( tgm_nmp_media.debug == 1 ) console.log( wrap );
    if(typeof jQuery.featherlight === 'function' ){
    jQuery.featherlight(jQuery(wrap), {
        type:{jquery: true},
        beforeClose: function(){
            var leaving = true;
                if(!done_editing && jQuery('#groups_list').children('li').length ){
                   leaving = confirm('You currently have unsaved map areas. If you leave the editor now all changes will be lost. Do you want to exit?')
                }
            if(!leaving) return false;   
            }
        });
    } else {console.log('featherlight dependency missing')}
    //jQuery('#mapEditor').addClass('active').append(wrap);

}

function get_js_url(){
    var link = window.location.href;
    var strt = link.indexOf('/wp-admin/');
    var plugin_path = '/wp-content/plugins/bt-imagemap/library/theme/javascript/';
    var ret_link = link.substring(0, strt)+plugin_path;
    return ret_link;
}
function get_css_url(){
    var link = window.location.href;
    var strt = link.indexOf('/wp-admin/');
    var plugin_path = '/wp-content/plugins/bt-imagemap/library/theme/css/';
    var ret_link = link.substring(0, strt)+plugin_path;
    return ret_link;
}

function build_main_controls(parent_element, img_contain){
    var top_contain = document.createElement('div');
        top_contain.id = "main_txt";
        jQuery(top_contain).addClass("main_txt");
        top_contain.innerHTML = "<h2 id='main_title'>Start Mapping</h2><label class='top_label' for='main_name'>Add a new Set Piece to the Project:</label><input type='text' name='main_name' class='main_name inactive' value='' placeholder='Set Piece Name...' /><span class='nonextstep'><i class='fas fa-times'></i></span><label class='top_label' for='main_url'>Set Piece Page URL:</label><input type='text' name='main_url' class='main_url inactive' value='' placeholder='https://yoursite.com/page/' />";
    var top_controls = document.createElement('div');
        top_controls.id = "top_controls";
        jQuery(top_controls).addClass("top_controls");
    var side_controls = document.createElement('div');
        side_controls.id = "side_controls";
        jQuery(side_controls).addClass("side_controls");
    if(is_font_awesome){     
        top_controls.innerHTML = '<ul id="top_control_pills"><li class="add"><span class="top_button"><i class="far fa-plus-square"></i>Add Set Piece</span></li><li class="done"><span class="top_button inactive" id="all_done"><i class="far fa-check-square"></i>All Finished</span></li></ul><div id="action_center"></div>';
        side_controls.innerHTML = '<ul id="side_control_buttons" class="inactive"><li class="add" title="Add New Area"><span class="side_button" id="new_area"><i class="far fa-plus-square"></i>new area</span></li><li class="clear" title="Clear Last Area"><span class="side_button" id="clear_area"><i class="far fa-minus-square"></i>clear last</span></li><li class="trash" title="Clear This Set Piece"><span class="side_button" id="clear_all"><i class="far fa-trash-alt"></i>clear all</span></li><li class="check" title="Finished Area"><span class="side_button" id="area_done"><i class="far fa-check-square"></i>done</span></li><li class="code" title="View the HTML Code"><span class="side_button" id="view_code"><i class="fas fa-code"></i>view HTML</span></li><li class="view" title="View All Map Areas"><span class="side_button" id="view_all"><i class="fas fa-eye"></i>View All Areas</span></li></ul><div class="area_groups"><span class="area_groups_title">Set Pieces</span><ul class="groups" id="groups_list"></ul><div id="edit_center"><label for="edit_name">Edit Current Name:</label><input type="text" name="edit_name" id="edit_name"><label for="edit_url">New URL</label><input type="text" name="edit_url" id="edit_url"><button class="edit_button inactive" id="edit_save_changes" disabled>Save Changes</button><button class="edit_button inactive" id="remap" disabled>Edit Map Areas</button><span id="close_edit_center"><i class="far fa-times-circle"></i></span></div>';
        } else {
            top_controls.innerHTML = '<ul id="top_control_pills"><li class="add"><span class="top_button">Add New Area</span></li><li class="done"><span class="top_button inactive" id="all_done">Done Editing</span></li></ul><div id="action_center"></div>';
            side_controls.innerHTML = '<ul id="side_control_buttons" class="inactive"><li class="add" title="Add New Area"><span class="side_button">new area</span></li><li class="clear" title="Clear Last Area"><span class="side_button">clear last</span></li><li class="trash" title="Clear This Set Piece"><span class="side_button">clear all</span></li><li class="code" title="View the HTML Code"><span class="side_button">view HTML</span></li><li class="view" title="View All Map Areas"><span class="side_button" id="view_all">View All Areas</span></li></ul><div class="area_groups"><span class="area_groups_title">Set Pieces</span><ul class="groups" id="groups_list"></ul><div id="edit_center"><label for="edit_name">Edit Current Name:</label><input type="text" name="edit_name" id="edit_name"><label for="edit_url">New URL</label><input type="text" name="edit_url" id="edit_url"><button class="edit_button inactive" id="edit_save_changes" disabled>Save Changes</button><button class="edit_button inactive" id="remap" disabled>Edit Map Areas</button><span id="close_edit_center">X</span></div>';
        }
    jQuery(top_contain).append(top_controls);
    jQuery(img_contain).addClass('inactive');
    jQuery(parent_element).append(top_contain, img_contain, side_controls);
}
